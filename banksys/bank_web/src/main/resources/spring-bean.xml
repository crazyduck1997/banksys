<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理-->
    <context:component-scan base-package="com.qf" >
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--Spring整合MyBatis框架-->
    <!--配置连接池-->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="password" value="123456"></property>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="username" value="root"></property>
        <property name="url" value="jdbc:mysql:///blank"></property>
    </bean>

    <!--配置SqlSessionFactory工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- 加载mybatis主配置文件  classpath 表示classes目录所在路径 -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--配置mapper接口所在包-->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.qf.mapper"/>
    </bean>

    <!--配置Spring框架声明式事务管理-->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 2配置事务的增强
        针对不同的切点的方法，设置一些事务处理策略
        一般是批量配置
    -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--  针对切点对应的方法
                针对查询， read-only=true 只读
                针对查询，propagation 传播特性，一般可以设置为SUPPORTS（如果没有事务，该方法不启用事务，如果处于使用事务的方法中，该方法进行事务合并）
            -->
            <tx:method name="add*" read-only="false" propagation="REQUIRED" />
            <tx:method name="delete*" read-only="false" propagation="REQUIRED"></tx:method>
            <tx:method name="update*" read-only="false" propagation="REQUIRED"></tx:method>
            <tx:method name="find*" read-only="true" propagation="SUPPORTS"></tx:method>
            <tx:method name="select*" read-only="true" propagation="SUPPORTS"></tx:method>
            <tx:method name="login*" read-only="true" propagation="SUPPORTS"></tx:method>
            <tx:method name="transfer*" read-only="false" propagation="REQUIRED"></tx:method>
            <!--  表示没有满足之前方法名配置的方法，不支持事务 -->
            <tx:method name="*" propagation="NOT_SUPPORTED"></tx:method>

        </tx:attributes>
    </tx:advice>

    <!-- 3AOP配置 -->
    <aop:config>
        <!-- 切入点 -->
        <!-- 针对业务层，增加事务处理的逻辑，切点，针对业务层 -->
        <aop:pointcut expression="execution(* com.qf.service.impl.*.*(..))" id="pc"/>

        <!--  针对事务，不需要配置切面类，因为spring中实现了针对事务的切面类 -->
        <!-- 通知 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>

    </aop:config>

</beans>